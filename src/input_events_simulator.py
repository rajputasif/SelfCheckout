import ast

class InputEventSimulator:
    """
    A simulator for reading and processing input events from a file.
    Each event is expected to be a dictionary stored as a string on each line of the file.
    In real-life usage, the events file would be generated by the physical device.
    """

    def __init__(self, events_file: str):
        """
        Initialize the InputEventSimulator by loading events from a file.

        Args:
            events_file (str): Path to the file containing event data, one event per line as a dictionary string.
        """
        self.events = []
        with open(events_file, "r") as f:
            for line in f:
                line = line.strip()
                if line:
                    self.events.append(ast.literal_eval(line))

    def get_item_scan_event(self, frame: int) -> dict:
        """
        Retrieve the item scan event for a specific frame.

        Args:
            frame (int): The frame number to search for.

        Returns:
            dict: A dictionary containing event details if found, otherwise default empty values.
        """
        output_dict = dict(
            frame="",
            client_id="",
            timestamp_str="",
            item_id="",
            type="",
            quantity_of_items="",
        )

        for event in self.events:
            if event["frame"] == frame and event["type"] == "item_scan":
                output_dict["frame"] = event["frame"]
                output_dict["client_id"] = event["client_id"]
                output_dict["timestamp_str"] = event["timestamp_str"]
                output_dict["item_id"] = event["item_id"]
                output_dict["type"] = event["type"]
                output_dict["quantity_of_items"] = event["quantity_of_items"]
        return output_dict


# Example usage:
# input_simulator = InputEventSimulator("input_events.txt")
